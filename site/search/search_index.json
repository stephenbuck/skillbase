{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview: SkillBase is a distributed application that allows an organization to develop, workflow, and track the skill sets of its members. Organizations like schools, employers, or the military. The primary elements of the application are users, skills, and certifications. Users select skills and then follow a workflow to be granted certification. Users can search for other users that have specific skills. There is lots of room for integration with third-party applications for member management, content management, social media, etc.","title":"Home"},{"location":"backend/","text":"Overview:","title":"Overview"},{"location":"backend/build/","text":"Build: The Skillbase backend is built using Maven and a variety of plugins for dependency management, packaging, source formatting, etc. The Docker container names are: 'skillbase/catalog:latest' 'skillbase/workflow:latest' 'skillbase/member:latest' Commands: Type 'mvn clean' to clean Type 'mvn verify' to build Type 'mvn test' to test Type 'mvn wildfly:deploy' to deploy Tools: Type 'psql -d skillbase -U postgres -h localhost -p 15432' for PostgreSQL tool (password is 'postgres')Type 'sudo mvn liquibase:help' for Liquibase tool Type 'sudo mvn docker:help' for Docker tool Type 'sudo mvn wildfly:help' for Wildfly tool Change-Data Capture (Debezium) See http://debezium.io Database Changes (Liquibase) I\u2019ve used Liquibase for SQL database change management in a number of projects and really like its flexibility. I\u2019ll be using it for this project to keep the multiple databases used for microservices in sync. Links: https://maven.apache.org https://code.revelc.net/formatter-maven-plugin https://maven.apache.org/plugins/maven-javadoc-plugin https://maven.apache.org/plugins/maven-resources-plugin/","title":"Build"},{"location":"backend/design/","text":"Design: Domain-Driven Design: I\u2019ve become a big fan of domain-driven design, primarily because it forces the architecture to focus on the business on its terms. I\u2019m particularly interested in the intersection between DDD, microservices, and GraphQL. I\u2019m going to use a GraphQL schema, in a schema-first approach, to represent the domain model and it should serve as a \u201csingle source of truth\u201d from which other artifacts, such as SQL schemas and Java objects, can be created. Some parts of the system will be built with a code-first approach to take advantage of some of the GraphQL tools. Event-Driven Architecture: An event-driven architecture is such a natural way of looking at applications that it\u2019s hard to choose any other architecture. I\u2019ve been doing some form of event-driven development for most of my career, so it\u2019s gratifying to see it being so widely used these days. I\u2019ll be using Kafka for the message broker and Cloud-Events for the event definitions. The initial version will not use event-sourcing, but future versions will use Debezium for eventual consistency among the various distributed components (microservices, distributed caches, etc). Microservice Implementation: Past iterations have been implemented using a handful of services combined into one monolithic application, but there are definitely advantages to having a more fine-grained, microservice architecture and most new systems are being built this way. I\u2019ll be using a combination of Jakarta EE and Spring Boot as they are the most popular microservice frameworks for Java. Some of the microservices will delegate a portion of their functionality to backend providers (e.g. KeyCloak for IAM). Language (Java 21): I\u2019ve used Java for every backend implementation of this project so far and will use it for this one as well, especially given the recent evolution of Java, with new features like closures, records, etc. Framework (Jakarta EE): Jakarta EE is the latest incarnation of the J2EE framework. I have extensive experience with J2EE so it will be interesting to see how the framework has advanced. I expect to use Jakarta EE, especially the MicroProfile and its extensions, for the core framework. Authentication / Authorization (Jakarta EE JWT): The Skillbase backend uses the Jakarta EE JWT framework for runtime authentication and authorization. Configuration (Jakarta EE Configuration): The Skillbase backend uses the Jakarta EE Config framework for runtime configuration. Fault-Tolerance (Jakarta EE Fault-Tolerance): The Skillbase backend uses the Jakarta EE Fault-Tolerance framework to implement fault-tolerance. Feature Flags (OpenFeatures): The Skillbase backend uses the OpenFeatures framework to manage feature flags. GraphQL (Jakarta Microprofile GraphQL): The Skillbase backend uses the Jakarta Microprofile GraphQL framework to provide GraphQL endpoints. Health (Jakarta EE Health): Sklllbase uses the Jakarta EE Health framework to runtime health information. Messaging (Jakarta EE JMS): The Skillbase backend uses the Jakarta EE JMS framework to produce and consume events. Metrics (Jakarta EE Metrics): The Skillbase backend uses the Jakarta EE Metrics framework to provide runtime metrics. Persistence (Jakarta EE Persistence): The Skillbase backend uses the Jakara EE Persistence framework for object storage. REST (Jakarta EE JAX-RS): The Skillbase backend uses the Jakarta EE JAX-RS framework to provide REST endpoints. Telemetry (Jakarta EE Telemetry): The Skillbase backend uses the Jakarta EE Telemetry framework to provide runtime telemetry. Logging (Log4j, Slf4j): The Skillbase backend uses the Log4j and Slf4j libraries to generate logs. Links: https://dzone.com/refcardz/getting-started-domain-driven https://docs.oracle.com/en/java/javase/21/docs/api/index.html https://jakarta.ee https://microprofile.io/ https://microprofile.io/specifications/microprofile-config/ https://microprofile.io/specifications/microprofile-fault-tolerance/ https://microprofile.io/specifications/microprofile-health/ https://microprofile.io/specifications/microprofile-jwt-auth/ https://microprofile.io/specifications/microprofile-metrics/ https://microprofile.io/specifications/microprofile-open-api/ https://microprofile.io/specifications/microprofile-telemetry/ https://smallrye.io https://github.com/smallrye/smallrye-config https://github.com/smallrye/smallrye-fault-tolerance https://github.com/smallrye/smallrye-graphql https://github.com/smallrye/smallrye-health https://github.com/smallrye/smallrye-jwt https://github.com/smallrye/smallrye-metrics https://github.com/smallrye/smallrye-open-api https://github.com/smallrye/smallrye-opentelemetry https://github.com/smallrye/smallrye-opentracing https://github.com/smallrye/smallrye-reactive-messaging https://spring.io https://spring.io/projects/spring-boot https://docs.spring.io/spring-boot/maven-plugin https://www.docker.com https://fabric8io/docker-maven-plugin https://junit.org https://archunit.org https://arquillian.org https://testcontainers.com/ https://graphql.org https://smallrye.io/smallrye-graphql/maven-plugin/ https://github.com/graphql/graphiql https://openapis.org https://swagger.io https://grpc.io https://apache.kafka.org https://docs.confluent.io/kafka-clients/java/current/overview.html https://cloudevents.io https://postgresql.org https://www.liquibase.com https://github.com/mtxr/vscode-sqltools https://log4j.org https://slf4j.org https://opentelemetry.io/ https://github.com/enriquemolinari/jqueue https://github.com/gruelbox/transaction-outbox https://flagd.dev https://openfeature.dev https://json-schema.org/draft-07/schema#","title":"Design"},{"location":"backend/test/","text":"Test: Unit Testing (JUnit): The Skillbase backend uses the JUnit framework for unit testing. Architectural Testing (ArchUnit): The Skillbase backend uses the ArchUnit framework for architectural testing. Integration Testing (Testcontainers): The Skillbase backend uses the Testcontainers framework for integration testing.","title":"Test"},{"location":"backend/catalog/","text":"Overview:","title":"Overview"},{"location":"backend/catalog/build/","text":"Build: Commands: Type 'mvn clean' to clean Type 'mvn verify' to build Type 'mvn test' to test Type 'mvn wildfly:deploy' to deploy Tools: Type 'psql -d skillbase -U postgres -h localhost -p 15432' for PostgreSQL tool (password is 'postgres') Type 'sudo mvn liquibase:help' for Liquibase tool Type 'sudo mvn docker:help' for Docker tool Type 'sudo mvn wildfly:help' for Wildfly tool","title":"Build"},{"location":"backend/catalog/design/","text":"Design: Domain Entities: CatalogCategory CatalogSkill Domain Events: SKILLBASE_CATALOG_CATEGORY_CREATED SKILLBASE_CATALOG_CATEGORY_DELETED SKILLBASE_CATALOG_CATEGORY_UPDATED SKILLBASE_CATALOG_SKILL_CREATED SKILLBASE_CATALOG_SKILL_DELETED SKILLBASE_CATALOG_SKILL_UPDATED See Backend / Design for common design elements.","title":"Design"},{"location":"backend/catalog/endpoints/","text":"Endpoints: REST Endpoints: '/catalog' '/catalog/categories' '/catalog/skills' GraphQL Endpoints: Open './target/generated/schema.graphql' for GraphQL schema","title":"Endpoints"},{"location":"backend/catalog/test/","text":"Test:","title":"Test"},{"location":"backend/member/","text":"Overview: The member service manages member profiles, authentication and authorization. It manages the profile information itself, but delegates the authentication and authorization functionality to a third-party IAM. Member groups, roles, and users are one-to-one associated with their counterparts in the IAM.","title":"Overview"},{"location":"backend/member/build/","text":"Build: Commands: Type 'mvn clean' to clean Type 'mvn verify' to build Type 'mvn test' to test Type 'mvn wildfly:deploy' to deploy Tools: Type 'psql -d skillbase -U postgres -h localhost -p 15432' for PostgreSQL tool (password is 'postgres' Type 'sudo mvn liquibase:help' for Liquibase tool Type 'sudo mvn docker:help' for Docker tool Type 'sudo mvn wildfly:help' for Wildfly tool","title":"Build"},{"location":"backend/member/design/","text":"Design: The member service implements member profiles itself, but delegates to a third-party IAM for authentication, authorization, and JWT. Domain Entities: MemberGroup MemberUser Domain Events: SKILLBASE_MEMBER_GROUP_CREATED SKILLBASE_MEMBER_GROUP_DELETED SKILLBASE_MEMBER_GROUP_UPDATED SKILLBASE_MEMBER_USER_CREATED SKILLBASE_MEMBER_USER_DELETED SKILLBASE_MEMBER_USER_UPDATED See Backend / Design for common design elements.","title":"Design"},{"location":"backend/member/endpoints/","text":"Endpoints: REST Endpoints: '/member' '/member/groups' '/member/users' GraphQL Endpoints: Open './target/generated/schema.graphql' for GraphQL schema","title":"Endpoints"},{"location":"backend/member/test/","text":"Test:","title":"Test"},{"location":"backend/workflow/","text":"T Overview:","title":"Overview"},{"location":"backend/workflow/build/","text":"Build: Commands: Type 'mvn clean' to clean Type 'mvn verify' to build Type 'mvn test' to test Type 'mvn wildfly:deploy' to deploy Tools: Type 'psql -d skillbase -U postgres -h localhost -p 15432' for PostgreSQL tool (password is 'postgres') Type 'sudo mvn liquibase:help' for Liquibase tool Type 'sudo mvn docker:help' for Docker tool Type 'sudo mvn wildfly:help' for Wildfly tool","title":"Build"},{"location":"backend/workflow/design/","text":"Design: Domain Entities: WorkflowModel WorkflowProcess Domain Events: SKILLBASE_WORKFLOW_MODEL_CREATED SKILLBASE_WORKFLOW_MODEL_DELETED SKILLBASE_WORKFLOW_MODEL_UPDATED SKILLBASE_WORKFLOW_PROCESS_CREATED SKILLBASE_WORKFLOW_PROCESS_DELETED SKILLBASE_WORKFLOW_PROCESS_UPDATED See Backend / Design for common design elements.","title":"Design"},{"location":"backend/workflow/endpoints/","text":"Endpoints: REST Endpoints: '/workflow' '/workflow/models' '/workflow/processes' GraphQL Endpoints: Open './target/generated/schema.graphql' for GraphQL schema","title":"Endpoints"},{"location":"backend/workflow/test/","text":"Test:","title":"Test"},{"location":"frontend/","text":"Overview: I\u2019ve done heaps of frontend development work in the past, but I\u2019m more focused on backend development these days, so I\u2019m going to go with some popular choices. Framework (React) I\u2019ve worked with a lot of JavaScript frameworks like Angular, JQuery and Backbone, but React seems to be the framework du jour, so I\u2019ll go with it. The React Router package seems like it will be useful for a Single-Page Architecture, which is my current bias, due to the high likelihood for customization and integration. Interfaces (GraphQL, REST) The backend will support GraphQL and REST so the client will have to follow along. I\u2019ll be using the Relay client library since it\u2019s designed for the React framework. Links: https://react.dev https://reactrouter.com https://relay.dev","title":"Overview"},{"location":"frontend/build/","text":"Build: Commands: Tools; Links:","title":"Build"},{"location":"frontend/design/","text":"Design:","title":"Design"},{"location":"frontend/test/","text":"Test:","title":"Test"},{"location":"system/","text":"Overview: This Skillbase application runs locally or in the cloud as a set of Docker containers. In this version, the containers are deployed to local Docker hosts using Terraform. In future versions, the containers will be deployed to the cloud using Kubernetes. Containers (Docker): Containers are here to stay, and Docker is the gold standard. Having a good pipeline from the build system to a Docker system will help with making the application available in the \u201ccloud\u201d and when used with an orchestration system like Kubernetes, should help enormously with scaling the system up. There aren\u2019t any alternatives that are as popular and flexible as Docker, so this is a keeper. Infrastructure (Terraform, Kubernetes): Terraform is an awesome \"infrastructure as code\" tool. I'm currently using it during development to populate my Docker instance with my containers. It will be a good segue into Kubernetes in future phases.","title":"Overview"},{"location":"system/build/","text":"Build: Commands: Type 'sudo mvn tf:apply' to apply terraform plan Type 'sudo mvn tf:destroy' to destroy terraform plan Tools: Type 'sudo docker ps' to see container status Type 'psql -d skillbase -U postgres -h 172.17.0.1 -p 5432' for PostgreSQL tool (password is 'postgres') Open 'http://172.17.0.1:9013' for ApiSix tool Open 'http://172.17.0.1:8080/flowable-admin' for Flowable tool Open 'http://172.17.0.1:8081/admin' for Keycloak tool Open 'http://172.17.0.1:9080' for Ngnix tool Open 'http://172.17.0.1:8087' for Flipt tool Links: See https://github.com/deliveredtechnologies/terraform-maven","title":"Build"},{"location":"system/design/","text":"Design: The Skillbase backend is designed a set of distributed microservices running in Docker containers. Each component of the backend is packaged into a custom Docker image derived from a standard image. For example, the 'skillbase/postgres' image is derived from the standard 'postgres' image, but adds configuration information, etc. Containers: ** Database (skillbase/postgres): Database functionality (Postgres) runs in a custom container derived from the 'postges:latest' image. See https://postgresql.org Features (skillbase/flipt): Feature flag functionality (Flipt) runs in a custom container derived from the 'docker.flipt.io/flipt/flipt:latest' image. See https://flipt.io Identity (skillbase/keycloak): Identity functionaliy (Keycloak) runs in a custom container derived from the 'quay.io/keycloak/keycloak:latest' image. See https://www.keycloak.org Messaging (skillbase/kafka): Messaging functionality (Kafka) runs in a custom container derived from the 'bitnami/kafka:latest' image. See https://kafka.apache.org Runtime (skillbase/wildfly): Runtime functionality (Wildfly) runs in a custom container derived from the 'quay.io/wildfly/wildfly:latest' image. See https://www.wildfly.org Workflow (skillbase/flowable): Workflow functionality (Flowable) runs in a custom container derived from the 'flowable/flowable-rest:latest' image. See https://www.flowable.org Caching (Redis): Caching functionality is provided by Redis. Integration with Redis is through its client implementation. See https://redis.io Image skillbase/redis Change-Data (Debezium): Change-Data Capture functionality is provided by Debezium. Integration with Debezium is through its Postgres and Kafka interfaces. See https://debezium.io Image skillbase/debezium Configuration (Etcd): Configuration functionality is provided by Etcd. Integration with Etcd is through its provider implementation. See https://etcd.io Image skillbase/etcd Logging (Fluentd): Logging aggregation is provided by Fluentd. See https://fluentd.org Image skillbase/fluentd Monitoring (Prometheus): Monitoring functionality is provided by Prometheus. See https://prometheus.io Image skillbase/prometheus Web (Nginx): Web functionality is provided by Nginx. See https://nginx.org Image skillbase/nginx Links: https://docker.com https://kubernetes.io https://terraform.io","title":"Design"},{"location":"system/test/","text":"Test:","title":"Test"}]}