package com.headspin.skillbase.member.infrastructure.messaging;

import com.headspin.skillbase.common.events.WorkflowEvent;

public class MemberWorflowEventConsumer {
    
    private static final Duration poll_timeout = Duration.ofMillis(100);

    @Inject
    private WorkflowDeploymentsService deps;

    @Inject
    private WorkflowDefinitionsService defs;

    @Inject
    private WorkflowInstancesService inst;
    
    public MemberWorkflowEventConsumer() {
        ConsumerRunnable cr = new ConsumerRunnable();
        Thread thread = new Thread(cr);
        thread.start();
    }

    private static class ConsumerRunnable implements Runnable {

        @Override
        public void run() {
            Properties config = new Properties();
            KafkaConsumer<String, String> consumer = new KafkaConsumer<>(config);
            consumer.subscribe(Collections.singleton(WorkflowEvent.WORKFLOW_EVENT_TOPIC));
            try {
                while (true) {
                    final ConsumerRecords<String, String> consumerRecords = consumer.poll(poll_timeout);
                    for (final ConsumerRecord<String, String> consumerRecord : consumerRecords) {
                        log.info("Getting consumer record key: '" + consumerRecord.key() + "', value: '" + consumerRecord.value() + "', partition: " + consumerRecord.partition() + " and offset: " + consumerRecord.offset() + " at " + new Date(consumerRecord.timestamp()));
                        onWorkflowEvent((WorkflowEvent)null);
                    }
                }
            }
            catch (Exception e) {
                log.info(String.valueOf(e));
            }
            finally {
                consumer.close();
            }
        }

        private void onWorkflowEvent(WorkflowEvent event) {
            switch (event.type()) {
    
                case WorkflowEvent.WORKFLOW_INSTANCE_CREATED:
                    onInstanceCreated(event);
                    break;
                case WorkflowEvent.WORKFLOW_INSTANCE_DELETED:
                    onInstanceDeleted(event);
                    break;
                case WorkflowEvent.WORKFLOW_INSTANCE_UPDATED:
                    onInstanceUpdated(event);
                    break;
    
                default:
                    break;
            }       
        }
    
        private void onInstanceCreated(WorkflowEvent event) {
        /*
            MemberProcess process = new MemberProcess();
            process.state = event?.state;
            process.title = event?.title;
            process.note = event?.note;
            insertProcess(process);
        */
        }
    
        private void onInstanceDeleted(WorkflowEvent event) {
        /*
            MemberProcess process = findByInstanceId(event?.instance_id);
            deleteProcess(process.id);
        */
        }
    
        private void onInstanceUpdated(WorkflowEvent event) {
        /*
            MemberProcess process = findByInstanceId(event?.instance_id);
            process.state = event?.state;
            updateProcess(process);
        */
        }
    
        /*
        private void onInstancePassed(WorkflowEvent event) {
            
            MemberProcess process = findByInstanceId(event?.instance_id);
            process.state = event?.state;
            updateProcess(process);
    
            MemberAchievement achievement = new MemberAchievement();
            achievement.skill_id = event?.skill_id;
            achievement.credential_id = event?.credential_id;
            achievement.title = event?.title;
            achievement.note = event?.note;
            insertAchievement(achievement);
        }
    
        private void onInstanceFailed(WorkflowEvent event) {
            // TBD
        }
        */    
    }
}

