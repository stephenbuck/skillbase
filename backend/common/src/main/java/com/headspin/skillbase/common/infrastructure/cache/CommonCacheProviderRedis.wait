package com.headspin.skillbase.common.infrastructure.cache;

import com.headspin.skillbase.common.providers.CommonCacheProvider;

import io.lettuce.core.RedisClient;
import io.lettuce.core.RedisURI;
import io.lettuce.core.api.StatefulRedisConnection;
import io.lettuce.core.api.sync.RedisCommands;
import jakarta.inject.Inject;
import lombok.extern.slf4j.Slf4j;

/**
 * Redis implementation of the common cache provider interface.
 * 
 * @author Stephen Buck
 * @since 1.0
 */

@Slf4j
public class CommonCacheProviderRedis implements CommonCacheProvider {

    private final RedisURI uri;
    private final RedisClient client;
    private final StatefulRedisConnection<String, String> conn;
    private final RedisCommands<String, String> cmnds;

    @Inject
    public CommonCacheProviderRedis(final String configURI) {
        this.uri = RedisURI.create(configURI);
        this.client = RedisClient.create(uri);
        this.conn = client.connect();
        this.cmnds = conn.sync();
    }

    public String get(final String key) throws Exception {
        return cmnds.get(key);
    }

    @Override
    public boolean set(final String key, final String val) throws Exception {
        return "OK".equals(cmnds.set(key, val));
    }

    @Override
    public boolean touch(final String key) throws Exception {
        return cmnds.touch(key) == 1;
    }

    @Override
    public boolean exists(final String key) throws Exception {
        return cmnds.exists(key) == 1;
    }

    @Override
    public boolean delete(final String key) throws Exception {
        return cmnds.del(key) == 1;
    }

    @Override
    public void test() {
        log.info("test:");
    }
}
